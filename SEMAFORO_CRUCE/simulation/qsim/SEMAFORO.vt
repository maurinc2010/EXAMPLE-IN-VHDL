// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2020 18:43:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SEMAFORO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SEMAFORO_vlg_sample_tst(
	clk_1s,
	reset,
	sensor,
	sampler_tx
);
input  clk_1s;
input  reset;
input  sensor;
output sampler_tx;

reg sample;
time current_time;
always @(clk_1s or reset or sensor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SEMAFORO_vlg_check_tst (
	carretera,
	rural,
	sampler_rx
);
input [2:0] carretera;
input [2:0] rural;
input sampler_rx;

reg [2:0] carretera_expected;
reg [2:0] rural_expected;

reg [2:0] carretera_prev;
reg [2:0] rural_prev;

reg [2:0] carretera_expected_prev;
reg [2:0] rural_expected_prev;

reg [2:0] last_carretera_exp;
reg [2:0] last_rural_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	carretera_prev = carretera;
	rural_prev = rural;
end

// update expected /o prevs

always @(trigger)
begin
	carretera_expected_prev = carretera_expected;
	rural_expected_prev = rural_expected;
end


// expected carretera[ 2 ]
initial
begin
	carretera_expected[2] = 1'bX;
end 
// expected carretera[ 1 ]
initial
begin
	carretera_expected[1] = 1'bX;
end 
// expected carretera[ 0 ]
initial
begin
	carretera_expected[0] = 1'bX;
end 
// expected rural[ 2 ]
initial
begin
	rural_expected[2] = 1'bX;
end 
// expected rural[ 1 ]
initial
begin
	rural_expected[1] = 1'bX;
end 
// expected rural[ 0 ]
initial
begin
	rural_expected[0] = 1'bX;
end 
// generate trigger
always @(carretera_expected or carretera or rural_expected or rural)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carretera = %b | expected rural = %b | ",carretera_expected_prev,rural_expected_prev);
	$display("| real carretera = %b | real rural = %b | ",carretera_prev,rural_prev);
`endif
	if (
		( carretera_expected_prev[0] !== 1'bx ) && ( carretera_prev[0] !== carretera_expected_prev[0] )
		&& ((carretera_expected_prev[0] !== last_carretera_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carretera[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carretera_expected_prev);
		$display ("     Real value = %b", carretera_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carretera_exp[0] = carretera_expected_prev[0];
	end
	if (
		( carretera_expected_prev[1] !== 1'bx ) && ( carretera_prev[1] !== carretera_expected_prev[1] )
		&& ((carretera_expected_prev[1] !== last_carretera_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carretera[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carretera_expected_prev);
		$display ("     Real value = %b", carretera_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carretera_exp[1] = carretera_expected_prev[1];
	end
	if (
		( carretera_expected_prev[2] !== 1'bx ) && ( carretera_prev[2] !== carretera_expected_prev[2] )
		&& ((carretera_expected_prev[2] !== last_carretera_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carretera[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carretera_expected_prev);
		$display ("     Real value = %b", carretera_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carretera_exp[2] = carretera_expected_prev[2];
	end
	if (
		( rural_expected_prev[0] !== 1'bx ) && ( rural_prev[0] !== rural_expected_prev[0] )
		&& ((rural_expected_prev[0] !== last_rural_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rural[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rural_expected_prev);
		$display ("     Real value = %b", rural_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rural_exp[0] = rural_expected_prev[0];
	end
	if (
		( rural_expected_prev[1] !== 1'bx ) && ( rural_prev[1] !== rural_expected_prev[1] )
		&& ((rural_expected_prev[1] !== last_rural_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rural[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rural_expected_prev);
		$display ("     Real value = %b", rural_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rural_exp[1] = rural_expected_prev[1];
	end
	if (
		( rural_expected_prev[2] !== 1'bx ) && ( rural_prev[2] !== rural_expected_prev[2] )
		&& ((rural_expected_prev[2] !== last_rural_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rural[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rural_expected_prev);
		$display ("     Real value = %b", rural_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rural_exp[2] = rural_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SEMAFORO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_1s;
reg reset;
reg sensor;
// wires                                               
wire [2:0] carretera;
wire [2:0] rural;

wire sampler;                             

// assign statements (if any)                          
SEMAFORO i1 (
// port map - connection between master ports and signals/registers   
	.carretera(carretera),
	.clk_1s(clk_1s),
	.reset(reset),
	.rural(rural),
	.sensor(sensor)
);

// clk_1s
always
begin
	clk_1s = 1'b0;
	clk_1s = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #350000 1'b1;
	reset = #20000 1'b0;
end 

// sensor
initial
begin
	sensor = 1'b0;
	sensor = #80000 1'b1;
	sensor = #40000 1'b0;
end 

SEMAFORO_vlg_sample_tst tb_sample (
	.clk_1s(clk_1s),
	.reset(reset),
	.sensor(sensor),
	.sampler_tx(sampler)
);

SEMAFORO_vlg_check_tst tb_out(
	.carretera(carretera),
	.rural(rural),
	.sampler_rx(sampler)
);
endmodule

